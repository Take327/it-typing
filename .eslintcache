[{"D:\\work\\it-typing\\src\\index.tsx":"1","D:\\work\\it-typing\\src\\reportWebVitals.ts":"2","D:\\work\\it-typing\\src\\App.tsx":"3","D:\\work\\it-typing\\src\\components\\TypingArea\\keyboard\\Keyboard.tsx":"4","D:\\work\\it-typing\\src\\components\\TypingArea\\keyboard\\KeyLine.tsx":"5","D:\\work\\it-typing\\src\\components\\TypingArea\\keyboard\\KeyButtonNormal.tsx":"6","D:\\work\\it-typing\\src\\components\\TypingArea\\TypingArea.tsx":"7","D:\\work\\it-typing\\src\\components\\TypingArea\\TextArea\\TextArea.tsx":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":517,"mtime":1612184586560,"results":"12","hashOfConfig":"10"},{"size":865,"mtime":1612086014336,"results":"13","hashOfConfig":"10"},{"size":4121,"mtime":1612184638415,"results":"14","hashOfConfig":"10"},{"size":3673,"mtime":1612085320755,"results":"15","hashOfConfig":"10"},{"size":346,"mtime":1612183964096,"results":"16","hashOfConfig":"10"},{"size":433,"mtime":1612184615128,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1xvv1p9",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\work\\it-typing\\src\\index.tsx",[],["37","38"],"D:\\work\\it-typing\\src\\reportWebVitals.ts",[],"D:\\work\\it-typing\\src\\App.tsx",[],"D:\\work\\it-typing\\src\\components\\TypingArea\\keyboard\\Keyboard.tsx",["39"],"import React, { useState, useEffect } from 'react';\r\nimport KeyLine from './KeyLine';\r\nimport './Keyboard.css';\r\n\r\nconst Keyboard: React.FC = () => {\r\n\r\n    useEffect(() => {\r\n        document.onkeydown = (event) => {\r\n            const targetId = event.keyCode + '_button';\r\n            const target = document.getElementById(targetId);\r\n            if (target) {\r\n                target.style.backgroundColor = '#81d8d0';\r\n            }\r\n        }\r\n        document.onkeyup = (event) => {\r\n            const targetId = event.keyCode + '_button';\r\n            const target = document.getElementById(targetId);\r\n            if (target) {\r\n                target.style.backgroundColor = '#FFF';\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"keyboard\">\r\n            <KeyLine />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Keyboard; ","D:\\work\\it-typing\\src\\components\\TypingArea\\keyboard\\KeyLine.tsx",[],"D:\\work\\it-typing\\src\\components\\TypingArea\\keyboard\\KeyButtonNormal.tsx",["40","41"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport './KeyButton.css';\r\n\r\ntype Props = {\r\n    keyObject: {\r\n        keyCode: string,\r\n        keyValue: string\r\n    }\r\n}\r\n\r\ntype KeyObject = {\r\n    keyCode: string,\r\n    keyValue: string\r\n}\r\n\r\nconst KeyButtonNormal: React.FC<Props> = ({ keyObject }) => {\r\n    const [backGroundColor, setBackGroundColor] = useState('#FFF');\r\n\r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            paper: {\r\n                padding: theme.spacing(2),\r\n                textAlign: 'center',\r\n                color: theme.palette.text.secondary,\r\n                height: '40px',\r\n                width: '40px',\r\n                backgroundColor: '#FFF'\r\n\r\n            },\r\n            shift: {\r\n                padding: theme.spacing(2),\r\n                textAlign: 'center',\r\n                color: theme.palette.text.secondary,\r\n                height: '40px',\r\n                width: '80px'\r\n            },\r\n            tab: {\r\n                padding: theme.spacing(2),\r\n                textAlign: 'center',\r\n                color: theme.palette.text.secondary,\r\n                height: '40px',\r\n                width: '60px'\r\n            },\r\n            space: {\r\n                padding: theme.spacing(2),\r\n                textAlign: 'center',\r\n                color: theme.palette.text.secondary,\r\n                height: '40px',\r\n                width: '220px'\r\n            },\r\n            caps: {\r\n                padding: theme.spacing(2),\r\n                textAlign: 'center',\r\n                color: theme.palette.text.secondary,\r\n                height: '40px',\r\n                width: '70px'\r\n            },\r\n            ctrl: {\r\n                padding: theme.spacing(2),\r\n                textAlign: 'center',\r\n                color: theme.palette.text.secondary,\r\n                height: '40px',\r\n                width: '65px'\r\n            },\r\n            enter: {\r\n                padding: theme.spacing(2),\r\n                textAlign: 'center',\r\n                color: theme.palette.text.secondary,\r\n                height: '90px',\r\n                width: '90px'\r\n            }\r\n        }),\r\n    );\r\n    const classes = useStyles();\r\n\r\n    const handleChange = () => {\r\n\r\n\r\n        console.log('a');\r\n        setBackGroundColor('#81d8d0');\r\n    }\r\n\r\n    const keyHandle = (keyObject: KeyObject) => {\r\n        const code = keyObject.keyCode;\r\n        const value = keyObject.keyValue\r\n        switch (value) {\r\n            case 'shift':\r\n                return <Paper id={code + '_button'} className={classes.shift}>{value}</Paper>\r\n\r\n            case 'Tab':\r\n                return <Paper id={code + '_button'} className={classes.tab}>{value}</Paper>\r\n\r\n            case 'space':\r\n                return <Paper id={code + '_button'} className={classes.space}>{value}</Paper>\r\n\r\n            case 'caps':\r\n                return <Paper id={code + '_button'} className={classes.caps}>{value}</Paper>\r\n\r\n            case 'ctrl':\r\n                return <Paper id={code + '_button'} className={classes.ctrl}>{value}</Paper>\r\n\r\n            case 'Enter':\r\n                return <Paper id={code + '_button'} className={classes.enter}>{value}</Paper>\r\n\r\n            default:\r\n                return <Paper id={code + '_button'} className={classes.paper}>{value}</Paper>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"key_button\" onClick={(e) => handleChange()}>\r\n            {keyHandle(keyObject)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default KeyButtonNormal;","D:\\work\\it-typing\\src\\components\\TypingArea\\TypingArea.tsx",[],"D:\\work\\it-typing\\src\\components\\TypingArea\\TextArea\\TextArea.tsx",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":1,"column":17,"nodeType":"48","messageId":"49","endLine":1,"endColumn":25},{"ruleId":"46","severity":1,"message":"50","line":1,"column":27,"nodeType":"48","messageId":"49","endLine":1,"endColumn":36},{"ruleId":"46","severity":1,"message":"51","line":19,"column":12,"nodeType":"48","messageId":"49","endLine":19,"endColumn":27},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'backGroundColor' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]